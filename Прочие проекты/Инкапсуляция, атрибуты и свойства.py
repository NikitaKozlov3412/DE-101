# Инкапсуляция, атрибуты и свойства

class Person:
    def __init__(self, name, age):
        self.__name = name    # устанавливаем имя
        self.__age = age       # устанавливаем возраст
                  
    def print_person(self):
        print(f"Имя: {self.__name}\tВозраст: {self.__age}")
          
  
tom = Person("Tom", 39)
tom.__name = "Человек-паук"     # пытаемся изменить атрибут __name
tom.__age = -129                # пытаемся изменить атрибут __
tom.print_person()              # Имя: Tom        Возраст: 39

print("\n")


'''
Тем не менее приватность атрибутов тут довольно относительна. Например, 
мы можем использовать полное имя атрибута:
'''

class Person:
    def __init__(self, name, age):
        self.__name = name    # устанавливаем имя
        self.__age = age       # устанавливаем возраст
                  
    def print_person(self):
        print(f"Имя: {self.__name}\tВозраст: {self.__age}")
          
  
tom = Person("Tom", 39)
tom._Person__name = "Человек-паук"     # изменяем атрибут __name
tom.print_person()              # Имя: Человек-паук        Возраст: 39

print("\n")

# Методы доступа. Геттеры и сеттеры

class Person:
    def __init__(self, name, age):
        self.__name = name    # Устанавливаем имя (защищаем его, используя двойное подчеркивание)
        self.__age = age       # Устанавливаем возраст (защищаем его, используя двойное подчеркивание)
 
    # Сеттер для установки возраста
    def set_age(self, age):
        # Проверяем, что возраст находится в допустимом диапазоне
        if 0 < age < 110:
            self.__age = age  # Устанавливаем новый возраст
        else:
            print("Недопустимый возраст")  # Выводим сообщение об ошибке
 
    # Геттер для получения возраста
    def get_age(self):
        return self.__age  # Возвращаем значение возраста
 
    # Геттер для получения имени
    def get_name(self):
        return self.__name  # Возвращаем значение имени
     
    # Метод для печати информации о человеке
    def print_person(self):
        print(f"Имя: {self.__name}\tВозраст: {self.__age}")  # Выводим имя и возраст
  
# Создаем объект класса Person
tom = Person("Tom", 39)
tom.print_person()  # Имя: Tom  Возраст: 39

# Пытаемся установить недопустимый возраст
tom.set_age(-3486)  # Вывод: Недопустимый возраст

# Устанавливаем допустимый возраст
tom.set_age(25)
tom.print_person()  # Имя: Tom  Возраст: 25

print("\n")

# Аннотации свойств

class Person:
    def __init__(self, name, age):
        self.__name = name    # Устанавливаем имя (защищаем его, используя двойное подчеркивание)
        self.__age = age       # Устанавливаем возраст (защищаем его, используя двойное подчеркивание)
 
    # Свойство-геттер для получения возраста
    @property
    def age(self):
        return self.__age  # Возвращаем значение возраста
 
    # Свойство-сеттер для установки возраста
    @age.setter
    def age(self, age):
        # Проверяем, что возраст находится в допустимом диапазоне
        if 0 < age < 110:
            self.__age = age  # Устанавливаем новый возраст
        else:
            print("Недопустимый возраст")  # Выводим сообщение об ошибке
 
    # Свойство-геттер для получения имени
    @property
    def name(self):
        return self.__name  # Возвращаем значение имени
     
    # Метод для печати информации о человеке
    def print_person(self):
        print(f"Имя: {self.__name}\tВозраст: {self.__age}")  # Выводим имя и возраст
  
# Создаем объект класса Person
tom = Person("Tom", 39)
tom.print_person()  # Имя: Tom  Возраст: 39

# Пытаемся установить недопустимый возраст
tom.age = -3486     # Вывод: Недопустимый возраст (Обращение к сеттеру)
print(tom.age)      # Вывод: 39 (Обращение к геттеру)

# Устанавливаем допустимый возраст
tom.age = 25        # (Обращение к сеттеру)
tom.print_person()  # Имя: Tom  Возраст: 25

print("\n")